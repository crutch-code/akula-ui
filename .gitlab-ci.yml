stages:
  - validate
  - build
  - publish
  - deploy

validate:helm:
  stage: validate
  image: dtzar/helm-kubectl:3
  rules:
    - exists:
        - "*/Chart.yaml"
  script:
    - helm version
    - helm lint ./chart/

build:helm:
  stage: build
  image: dtzar/helm-kubectl:3
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
    - if: $CI_COMMIT_TAG
  before_script:
    - export APP_VERSION=$(cat package.json | jq -r '.version')
    - |
      if [ $CI_COMMIT_TAG ]; then
      export CHART_VERSION=${CI_COMMIT_TAG:1} ;
      else
      export CHART_VERSION=${APP_VERSION}-${CI_COMMIT_SHORT_SHA} ;
      fi
  script:
    - echo $APP_VERSION
    - echo $CHART_VERSION
    - helm version
    - cd ./chart/
    - helm package . --app-version ${APP_VERSION} --version ${CHART_VERSION}
  artifacts:
    paths:
      - ./chart/*.tgz
    expire_in: 1 day

build:npm:
  stage: build
  image: node:21.2.0
  before_script:
    - npm install --package-lock
    - npm ci
    - unset CI
  script:
    - npm run build
  cache:
    key: $CI_PROJECT_NAME
    paths:
      - node_modules/
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_TAG == null'
      exists:
        - "package.json"

publish:docker:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  rules:
    - if: '$CI_COMMIT_TAG == null'
      exists:
        - "Dockerfile"
  before_script:
    - apk add jq
    - export APP_VERSION=$(cat package.json | jq -r '.version')
    - echo "{\"auths\":{\"$DOCKER_REPO\":{\"username\":\"$DOCKER_USER_RW\",\"password\":\"$DOCKER_PASSWORD_RW\"}}}" > /kaniko/.docker/config.json
  script:
    - echo $APP_VERSION
    - time /kaniko/executor
        --context $CI_PROJECT_DIR
        --dockerfile $CI_PROJECT_DIR/Dockerfile
        --destination $DOCKER_REPO/$CI_PROJECT_NAME:$APP_VERSION
        --cache=false
        --verbosity=debug
    - echo "Docker Image Name:" $DOCKER_REPO/$CI_PROJECT_NAME:$APP_VERSION

publish:helm:
  image: alpine:3
  stage: publish
  before_script:
    - apk add curl jq
    - export APP_VERSION=$(cat package.json | jq -r '.version')
    - |
      if [ $CI_COMMIT_TAG ]; then
      export CHART_VERSION=${CI_COMMIT_TAG:1} ;
      else
      export CHART_VERSION=${APP_VERSION}-${CI_COMMIT_SHORT_SHA} ;
      fi
  script:
    - curl -u ${HELM_USER_RW}:${HELM_PASSWORD_RW} -X PUT "${HELM_REPO}/${CI_PROJECT_NAME}-${CHART_VERSION}.tgz" -T ./chart/${CI_PROJECT_NAME}-${CHART_VERSION}.tgz

deploy:helm:
  stage: deploy
  image: dtzar/helm-kubectl:3
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
  before_script:
    - export APP_VERSION=$(cat package.json | jq -r '.version')
    - |
      if [ $CI_COMMIT_TAG ]; then
      export CHART_VERSION=${CI_COMMIT_TAG:1} ;
      else
      export CHART_VERSION=${APP_VERSION}-${CI_COMMIT_SHORT_SHA} ;
      fi
    - curl -L https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-linux-amd64 -o /usr/local/bin/helm
    - chmod +x /usr/local/bin/helm
    - helm repo add ${HELM_REPO_ALIAS} --force-update --username "$HELM_USER_RO" --password "$HELM_PASSWORD_RO" "${HELM_REPO}"
    - helm repo update
  script:
    - helm version
    - time helm upgrade ${CI_PROJECT_NAME} ${HELM_REPO_ALIAS}/${CI_PROJECT_NAME}
      --install
      --wait
      --version ${CHART_VERSION}
      --namespace ${NS}
    - helm list -n ${NS}
